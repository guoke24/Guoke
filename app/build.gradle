apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.guohao.guoke"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

// To inline the bytecode built with JVM target 1.8 into
// bytecode that is being built with JVM target 1.6. (e.g. navArgs)


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.0.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.0.0'

    implementation("com.squareup.okhttp3:okhttp:3.2.0")
    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'

    implementation project(':guokeui')
    //implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-process:2.2.0"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

//配置 app module
project(":app") {
    Project project ->
        project.afterEvaluate {
            //获取build task 任务
            Task buildTask = getBuildTask(project, ":app:packageDebug")
            //获取 preBuild 任务
            Task preBuildTask = getBuildTask(project, ":clean")

            def taskStartTime = 0
            def taskEndTime = 0

            //在preBuild task 中追加一个监听获取在preBuild执行之前的时间戳的 action
            preBuildTask.doFirst {
                taskStartTime = System.currentTimeMillis()
            }
            //在build task 中追加一个监听获取执行完毕的时间戳的 action
            buildTask.doLast {
                taskEndTime = System.currentTimeMillis()
                println "build task 执行时间：${taskEndTime - taskStartTime}"
            }
        }
}

/**
 * 获取该project对应的build任务
 * @param project
 * @return
 */
Task getBuildTask(Project project, String taskPath) {

    //获取该project管理task的容器
    TaskContainer taskContainer = project.getTasks()

    //拿到build的Task对象
    Task buildTask = taskContainer.getByPath(taskPath)

    return buildTask
}